import numpy as npimport matplotlib.pyplot as pltfrom __future__ import divisiondef rul3(dA, dB):    dQ = np.dqrt(dA**2 + dB**2)    return dQ    #if q = cA^a B^b where c, m, n are constants, thendef rul4(Q, A, dA, a, B, dB, b):    dQ = Q * np.sqrt(((a*(dA/A))**2) + (b*(dB/B))**2)    return dQdef hms(O):    Ohms = (np.sum(O**-1))**-1    return Ohmsdef ohmsbruteforce(A, Aun):    ohmsun = np.abs(ohms(np.average(A)) - ohms(np.average(A) + Aun))    return ohmsun                #Variables#Measured Values (O=Ohms)R_unknown = 82.2R_25 = 24.1R_100 = 98.5#Measurement Uncertainties (V=Volts, A=Amps)V_un = .1A_un = .001O_un = .05#Experimental Values Unknown ResistorV1 = .16 ; A1 = .002V2 = .53 ; A2 = .007V3 = 1.07 ; A3 = .013V4 = 1.88 ; A4 = .023V5 = 2.95 ; A5 = .036V6 = 4.05 ; A6 = .05V7 = 4.95 ; A7 = .061V8 = 6.07 ; A8 = .075V9 = 6.9; A9 = .086V10 = 8.0 ; A10 = .099V11 = 9.03 ; A11 = .113V12 = 10.00 ; A12 = .125#Part 2sv = 4.98sv25 = .974sv100 = 4.0sa25 = .041sa100 = .041#Parallel Experimental Valuespv = 5.03pv25 = 4.991pv100 = 5.065pa24 = .217pa100 = .052V_array = np.array ([V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12])A_array = np.array ([A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12])x = A_array   #this should be the array you want to plot on the x axisy = V_arraydy = np.array([V_un]*12)  #this should be your error in y array#----------------------------------------------##Don't need to change anything in this section! #Find the intercept and slope, b and m, from Python's polynomial fitting functionb,m=np.polynomial.polynomial.polyfit(x,y,1,w=dy)#Write the equation for the best fit line based on the slope and interceptfit = b+m*x#Calculate the error in slope and intercept#def Delta(x, dy) is a function, and we will learn how to write our own at a later date. They are very useful!def Delta(x, dy):    D = (sum(1/dy**2))*(sum(x**2/dy**2))-(sum(x/dy**2))**2    return D D=Delta(x, dy) dm = np.sqrt(1/D*sum(1/dy**2)) #error in slopedb = np.sqrt(1/D*sum(x**2/dy**2)) #error in intercept#Calculate the "goodness of fit" from the linear least squares fitting documentdef LLSFD2(x,y,dy):    N = sum(((y-b-m*x)/dy)**2)    return N                      N = LLSFD2(x,y,dy)#-----------------------------------------------------------------------##Plot data on graph. Plot error bars and place values for slope, error in slope and goodness of fit on the plot using "annotate"plt.figure(figsize=(15,10)) plt.plot(x, fit, color='green', linestyle='--')plt.scatter(x, y, color='blue', marker='o')  #create labels  YOU NEED TO CHANGE THESE!!!plt.xlabel('Amps')plt.ylabel('Volts')plt.title('Resistance') plt.errorbar(x, y, yerr=dy, xerr=None, fmt="none") #don't need to plot x error bars plt.annotate('Slope (ohms) = {value:.{digits}E}'.format(value=m, digits=2),             (0.05, 0.9), xycoords='axes fraction') plt.annotate('Error in Slope (ohms) = {value:.{digits}E}'.format(value=dm, digits=1),             (0.05, 0.85), xycoords='axes fraction') plt.annotate('Goodness of fit = {value:.{digits}E}'.format(value=N, digits=2),             (0.05, 0.80), xycoords='axes fraction')plt.show()